{"version":3,"sources":["firebase.js","DogName.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","CreateMsg","useState","msg","setMsg","handleMsgChange","useCallback","e","console","log","target","name","value","handleKeyDown","key","ref","push","placeholder","onChange","onKeyDown","Message","React","memo","message","onClick","child","remove","then","ClientsDisplay","clients","setClients","useEffect","clientsRef","handleChildAdded","snapshot","client","val","handleChildRemoved","filter","on","off","map","DogInput","dog","htmlFor","id","DogFavoriteNumberDisplay","time","DogName","setDog","SlowComponent","done","Date","now","sleep","type","Number","App","setTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fd2cb775.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBLHYeag273-F8L_funDb_8iUZO7BGZZW8\",\r\n    authDomain: \"chat-app-55e32.firebaseapp.com\",\r\n    databaseURL: \"https://chat-app-55e32.firebaseio.com\",\r\n    projectId: \"chat-app-55e32\",\r\n    storageBucket: \"chat-app-55e32.appspot.com\",\r\n    messagingSenderId: \"485337347226\",\r\n};\r\n\r\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\r\nexport const db = firebaseApp.database();","import React , { useEffect, useState, useCallback } from 'react';\r\n\r\nimport { db, firebaseApp } from './firebase'\r\n\r\nfunction DogName({ time }) {\r\n\r\n    const [dog, setDog] = React.useState(\"\");\r\n\r\n    return (\r\n      <div>\r\n        <DogInput dog={dog} onChange={setDog} />\r\n        <DogFavoriteNumberDisplay time={time} dog={dog} />\r\n        <CreateMsg></CreateMsg>\r\n        <ClientsDisplay/>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst CreateMsg = () => {\r\n    \r\n    const [msg, setMsg] = useState(\"\");\r\n    //console.log('Rendering InputField '+ props.index + '...');\r\n    const handleMsgChange = useCallback((e) => {\r\n        console.log(\"change\" + e.msg);\r\n        const { name, value } = e.target;\r\n        setMsg({\r\n            ...msg,\r\n            [name]: value\r\n        });\r\n    },[]);\r\n    \r\n    const handleKeyDown = useCallback((e) => {\r\n      if (e.key === \"Enter\") {\r\n        \r\n        console.log('handlekeydown: ' + e.target.value + \" - \" + msg.msg);\r\n    \r\n        const clientsRef = db.ref(\"clinets\")\r\n\r\n        clientsRef.push({\r\n          msg: msg.msg,\r\n        });\r\n        setMsg(\"\");\r\n      }\r\n    },[msg]);\r\n  \r\n    return (\r\n        <div>\r\n            <input\r\n                placeholder=\"msg\"\r\n                name=\"msg\" \r\n                onChange={handleMsgChange} \r\n                onKeyDown={handleKeyDown}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Message = React.memo(function User({ message }) {\r\n\r\n    const deleteHandler = (key) => {\r\n        \r\n        const clientsRef = db.ref(\"clinets\")\r\n        clientsRef.child(key).remove()\r\n        .then(() => {\r\n          console.log(\"remove key-> \" + key);\r\n        })\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          {console.log(\"render msg\")}\r\n          {message.key}{message.msg}\r\n          <button\r\n          onClick={() => deleteHandler(message.key)}>삭제</button> \r\n      </div>\r\n    );\r\n});\r\n\r\nfunction ClientsDisplay() {\r\n    \r\n    const [clients, setClients] = useState([])\r\n\r\n    useEffect(() => {\r\n        const clientsRef = db.ref(\"clinets\")\r\n        \r\n        const handleChildAdded = (snapshot) => {\r\n            const client = snapshot.val()\r\n            client.key = snapshot.key\r\n            setClients(clients => [...clients, client]);\r\n            console.log(\"child_added-> \"+client.key + \" \" + snapshot.key +\" \"+snapshot.val().msg);\r\n        }\r\n        const handleChildRemoved = snapshot => {\r\n            //setClients(clients.filter(client => client.key !== snapshot.key));\r\n\r\n            setClients(clients => clients.filter(client => client.key !== snapshot.key));\r\n            console.log(\"removed tasks(msg.key): \" + snapshot.key);\r\n        };\r\n        clientsRef.on(\"child_added\", handleChildAdded)\r\n        clientsRef.on(\"child_removed\", handleChildRemoved)      \r\n        return () => {\r\n            clientsRef.off('child_added', handleChildAdded)\r\n            clientsRef.off(\"child_removed\", handleChildRemoved)  \r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {console.log(\"dongname render\")}\r\n            {clients.map(message => (        \r\n                <Message\r\n                message={message}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DogInput({ dog, onChange }) {\r\n    return (\r\n        <>\r\n        <label htmlFor=\"dog\">Dog Name</label>\r\n        <br />\r\n        <input id=\"dog\" value={dog} onChange={e => onChange(e.target.value)} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction DogFavoriteNumberDisplay({ time, dog }) {\r\n    return (\r\n        <p>{dog ? `${dog}'s favorite number is ${time}.` : \"enter a dog name\"}</p>\r\n    );\r\n}\r\n\r\nexport default DogName;","import React, { useState, useEffect } from 'react';\nimport DogName from './DogName';\n\nimport { db, firebaseApp } from './firebase'\n\nfunction sleep(time) {\n  const done = Date.now() + time;\n  while (done > Date.now()) {\n    // sleep...\n  }\n}\n// slow component가 많은 데이터떄문에 render가 느린 상황을 상상해보세요 (예를들어)\nfunction SlowComponent({ time, onChange }) {\n  sleep(time);\n  return (\n    <div>\n      Wow, that was{\" \"}\n      <input\n        value={time}\n        type=\"number\"\n        onChange={e => onChange(Number(e.target.value))}\n      />\n      ms slow\n    </div>\n  );\n}\n\nfunction App() {\n  const [time, setTime] = React.useState(200);\n\n  return (\n    <div>\n      {console.log(\"render app\")}\n      <SlowComponent time={time} onChange={setTime} />\n      <DogName time={time} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}